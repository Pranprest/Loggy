#!/usr/bin/env python3
from argparse import ArgumentParser, Namespace
from os import name
from typing import Final, NoReturn
from pathlib import Path
from enum import IntEnum
import sys
import logging
import toml

class LoggingLevel(IntEnum):
	NOTSET, DEBUG, INFO, WARNING, ERROR, CRITICAL = range(6)
	LOGGING_OFFSET = 10 # "* 10" because of logging's inner workings

# TODO: Make logs readable by the script itself (through an argument or smth)
def _arg_Parser() -> ArgumentParser:
	_parser: Final[ArgumentParser] = ArgumentParser(description="Logging for userspace programs", prog="Bookitty")

	_parser.add_argument('message',
						type=str,
						metavar="MESSAGE",
						nargs="+",
						help="Message that will be logged to (FILE)")

	_parser.add_argument('-c','--context',
						type=str,
						metavar="CONTX",
						nargs="+",
						help="Context for the message")

	_parser.add_argument('-l', '--level',
						type=str,
						metavar="LEVEL",
						default="INFO",
						help="Logging level")

	_parser.add_argument('--log-file',
						type=str,
						metavar="LOG_FILE",
						help="The file where everything will be logged to")

	_parser.add_argument('--config-file',
						type=str,
						metavar="CONF_FILE",
						default=f"{Path.home()}/.config/bookitty/bookitty.conf" if name == 'posix' else f"{Path.home()}\\.bookitty\\bookitty.conf")
	return _parser

def _gen_cfg_file(cfg_path: Path) -> None:
	if cfg_path.exists():
		return 
	
	try:
		cfg_path.parents[0].mkdir(exist_ok=True)
		cfg_path.touch(exist_ok=True)
	except:
		sys.exit(f"Error trying to create config folder/file at {cfg_path}")

	default_cfg: Final[dict] = {
		"bookitty_cfg": {
			"Logging format": "[%(asctime)s] [%(levelname)s] - %(msg)s",
			"Logfile Path": f"{Path.home()}/.local/state/bookitty/logfile.log" if name == 'posix' else f"{Path.home()}\\.bookitty\\logfile.log",
			"Default logging level": "CRITICAL"
		}
	}

	try:
		with open(cfg_path, "w") as cfg_file:
			toml.dump(default_cfg, cfg_file)
			print("Wrote default config to ", cfg_path)
	except OSError: 
		sys.exit(f"Error while trying to write config to {cfg_path}")

def _read_cfg_file(cfg_path: Path) -> dict:
	if not cfg_path.exists():
		_gen_cfg_file(cfg_path)
		
	try:
		with open(cfg_path, "r") as cfg_file:
			return toml.load(cfg_file)
	except OSError:
		sys.exit(f"File not found at {cfg_path}")

def main() -> NoReturn:
	ARGS: Final[Namespace] = _arg_Parser().parse_args()
	CFG: Final[dict] = _read_cfg_file(Path(ARGS.config_file))
	FORMAT: Final[str] = CFG["bookitty_cfg"].get("Logging format", "[%(asctime)s] [%(levelname)s] - %(msg)s")
	ARGS.level = ARGS.level.upper()

	if ARGS.log_file is None:
		log_path = Path(CFG["bookitty_cfg"]["Logfile Path"])
	else:
		log_path = Path(ARGS.log_file)

	try:
		log_path.parents[0].mkdir(exist_ok=True)
		log_path.touch(exist_ok=True)
	except OSError:
		sys.exit(f"Error trying to create log folder/file at {log_path}")

	logging.basicConfig(filename=log_path, format=FORMAT, level=logging.NOTSET)

	if ARGS.level in LoggingLevel.__members__:
		finalstr: str = ""
		if ARGS.context != None: finalstr = " ".join(ARGS.context) + ': '
		finalstr += " ".join(ARGS.message)
		logging.log(msg=finalstr,
					level=(LoggingLevel[ARGS.level].value * LoggingLevel.LOGGING_OFFSET))
		print(f"Successfully logged to logfile \n{finalstr}")
		sys.exit()
	else:
		sys.exit(f"Level '{ARGS.level}' not found, valid levels are: " + " ".join(LoggingLevel.__members__) + ".")

if __name__ == "__main__":
	main()